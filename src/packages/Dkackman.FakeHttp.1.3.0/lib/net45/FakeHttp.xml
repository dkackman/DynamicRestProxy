<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FakeHttp</name>
    </assembly>
    <members>
        <member name="T:FakeHttp.AutomaticHttpClientHandler">
            <summary>
            A <see cref="T:System.Net.Http.HttpMessageHandler"/> that retrieves http resonse messages from
            from local storage if they exist or if they do not, from the http endpoint and then stores them for future retrieval
            </summary>
        </member>
        <member name="M:FakeHttp.AutomaticHttpClientHandler.#ctor(FakeHttp.IResponseStore)">
            <summary>
            ctor
            </summary>
            <param name="store">The storage mechanism for responses</param>
        </member>
        <member name="M:FakeHttp.AutomaticHttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Override the base class to capture and store the response message
            if it doesn't already exist in storage
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns>The response message</returns>
        </member>
        <member name="T:FakeHttp.CapturingHttpClientHandler">
            <summary>
            A <see cref="T:System.Net.Http.HttpMessageHandler"/> that retrieves http resonse messages from
            from the http endpoint and then stores them for future retrieval
            </summary>
        </member>
        <member name="M:FakeHttp.CapturingHttpClientHandler.#ctor(FakeHttp.IResponseStore)">
            <summary>
            ctor
            </summary>
            <param name="store">The storage mechanism for responses</param>
        </member>
        <member name="M:FakeHttp.CapturingHttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Override the base class to capture and store the response message
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns>The stored response message</returns>
        </member>
        <member name="T:FakeHttp.IResponseCallbacks">
            <summary>
            Callback interface to allow tests to supply runtime logic for responses 
            </summary>
        </member>
        <member name="M:FakeHttp.IResponseCallbacks.Deserialized(FakeHttp.ResponseInfo,System.IO.Stream)">
            <summary>
            Called just before the response is returned. Update deserialized values as necessary
            Primarily for cases where time based header values (like content expiration) need up to date values
            </summary>
            <param name="info">Desrialized response data. Header collections can be modified. Might be null if content file but no response file is present</param>
            <param name="content">The deserialized content stream. Might be null if response has no content</param>
            <returns>The original content or a modified content stream to attach to the <see cref="T:System.Net.Http.HttpResponseMessage"/></returns>
        </member>
        <member name="M:FakeHttp.IResponseCallbacks.Serializing(System.Net.Http.HttpResponseMessage)">
            <summary>
            Called after content is retrieved from the actual service during capturing and before it is saved to disk.
            Primarily allows for response content to mask sensitive data (ex SSN or other PII) before it is saved to storage
            </summary>
            <param name="response">The service response</param>
            <returns>The original content or a modified content stream to save to storage</returns>
        </member>
        <member name="M:FakeHttp.IResponseCallbacks.FilterParameter(System.String,System.String)">
            <summary>
            Determines if a given query parameter should be excluded from serialization
            </summary>
            <param name="name">The name of the Uri query parameter</param>
            <param name="value">The value of the uri query parameter</param>
            <returns>True to filter the parameter. False to include in serialization and hashing</returns>
        </member>
        <member name="P:FakeHttp.IResponseCallbacks.SetHeaderDate">
            <summary>
            Flag indicating whether to automatically set the Date header to the current date/time on deserialization
            </summary>
        </member>
        <member name="T:FakeHttp.MessageFormatter">
            <summary>
            Base class that formats http request and response message data prior to serialization
            </summary>
        </member>
        <member name="M:FakeHttp.MessageFormatter.#ctor(System.Func{System.String,System.String,System.Boolean})">
            <summary>
            ctor
            </summary>
            <param name="paramFilter">call back used to determine if a given query parameters should be excluded from serialziation</param>
            
        </member>
        <member name="M:FakeHttp.MessageFormatter.#ctor(FakeHttp.IResponseCallbacks)">
            <summary>
            ctor
            </summary>
            <param name="callbacks">call back object to manage resposnes at runtime</param>
        </member>
        <member name="P:FakeHttp.MessageFormatter.RepsonseCallbacks">
            <summary>
            A <see cref="T:FakeHttp.IResponseCallbacks"/> to manage response handling at runtime
            </summary>
        </member>
        <member name="M:FakeHttp.MessageFormatter.PackageResponse(System.Net.Http.HttpResponseMessage)">
            <summary>
            Convert the <see cref="T:System.Net.Http.HttpResponseMessage"/> into an object
            that is more serialization friendly
            </summary>
            <param name="response">The <see cref="T:System.Net.Http.HttpResponseMessage"/></param>
            <returns>A serializable object</returns>
        </member>
        <member name="M:FakeHttp.MessageFormatter.ToSha1Hash(System.String)">
            <summary>
            Genearate a SHA1 hash of a given text. Allows for platform specific implementation
            </summary>
            <param name="text">The string to hash</param>
            <returns>The hash</returns>
        </member>
        <member name="M:FakeHttp.MessageFormatter.ToFolderPath(System.Uri)">
            <summary>
            Retreive folder friendly representation of a Uri
            </summary>
            <param name="uri">The uri</param>
            <returns>Folder path</returns>
        </member>
        <member name="M:FakeHttp.MessageFormatter.ToFileName(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Determinaisatally generated file name for a request message
            </summary>
            <param name="request">The request</param>
            <param name="query">Nomralized query string</param>
            <returns>Filename</returns>
        </member>
        <member name="M:FakeHttp.MessageFormatter.ToShortFileName(System.Net.Http.HttpRequestMessage)">
            <summary>
            Determinaisatally generated file name for a request message
            </summary>
            <param name="request">The request</param>
            <returns>Filename</returns>
        </member>
        <member name="M:FakeHttp.MessageFormatter.NormalizeQuery(System.Uri)">
            <summary>
            The normalization algorthm is logically as follows
            - ToLowerInvariant the query string
            - split out each name value pair
            - filter out unwanted paramaters
            - order the remaining parameters alphabetically
            - reassemble them into a query string (without leading '?')
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/></param>
            <returns>The normalized query string</returns>
        </member>
        <member name="T:FakeHttp.IReadonlyResponseStore">
            <summary>
            Interface to abstract retrevial of <see cref="T:System.Net.Http.HttpResponseMessage"/> instances
            </summary>
        </member>
        <member name="M:FakeHttp.IReadonlyResponseStore.FindResponse(System.Net.Http.HttpRequestMessage)">
            <summary>
            Find a response in the store
            </summary>
            <param name="request">A <see cref="T:System.Net.Http.HttpRequestMessage"/> that describes the desired response</param>
            <returns>A <see cref="T:System.Net.Http.HttpResponseMessage"/>. Will return a 404 message if no response is found</returns>
        </member>
        <member name="M:FakeHttp.IReadonlyResponseStore.ResponseExists(System.Net.Http.HttpRequestMessage)">
            <summary>
            Determines if a <see cref="T:System.Net.Http.HttpResponseMessage"/> exists for the 
            <see cref="T:System.Net.Http.HttpRequestMessage"/>
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>True if a response exists for the request. Otherwise false</returns>
        </member>
        <member name="T:FakeHttp.IResponseStore">
            <summary>
            Interface to abstract storage and retrieval of <see cref="T:System.Net.Http.HttpResponseMessage"/> instances
            </summary>
        </member>
        <member name="M:FakeHttp.IResponseStore.StoreResponse(System.Net.Http.HttpResponseMessage)">
            <summary>
            Store a <see cref="T:System.Net.Http.HttpResponseMessage"/> 
            </summary>
            <param name="response">The <see cref="T:System.Net.Http.HttpResponseMessage"/> to store</param>
            <returns>A Task</returns>
        </member>
        <member name="T:FakeHttp.MessageHandlerMode">
            <summary>
            Flag indicating what type of <see cref="T:System.Net.Http.HttpMessageHandler"/> the 
            <see cref="T:FakeHttp.MessageHandlerFactory"/> will create by default
            </summary>
        </member>
        <member name="F:FakeHttp.MessageHandlerMode.Capture">
            <summary>
            Create a handler that will retrieve messages from endpoint and store for future use
            </summary>
        </member>
        <member name="F:FakeHttp.MessageHandlerMode.Fake">
            <summary>
            Create a handler that will retrieve message from faking storage
            </summary>
        </member>
        <member name="F:FakeHttp.MessageHandlerMode.Online">
            <summary>
            Create the default HttpMessage handler
            </summary>
        </member>
        <member name="F:FakeHttp.MessageHandlerMode.Automatic">
            <summary>
            Create a handler that will use stored responses if they exist. 
            If they do not exist the handler will retrieve them from the online endpoint and store for future use
            </summary>                
        </member>
        <member name="T:FakeHttp.MessageHandlerFactory">
            <summary>
            Static factory class that creates <see cref="T:System.Net.Http.HttpMessageHandler"/>
            instances for unit tests
            </summary>
        </member>
        <member name="P:FakeHttp.MessageHandlerFactory.Mode">
            <summary>
            Controls what type of <see cref="T:System.Net.Http.HttpMessageHandler"/> to create by default
            </summary>
        </member>
        <member name="M:FakeHttp.MessageHandlerFactory.CreateMessageHandler(FakeHttp.IReadonlyResponseStore)">
            <summary>
            Create an <see cref="T:System.Net.Http.HttpMessageHandler"/>.
            </summary>
            <param name="responseStore">Object that can store and retrieve response messages</param>
            <returns>A <see cref="T:System.Net.Http.HttpMessageHandler"/></returns>
        </member>
        <member name="M:FakeHttp.MessageHandlerFactory.CreateMessageHandler(FakeHttp.IResponseStore)">
            <summary>
            Create an <see cref="T:System.Net.Http.HttpMessageHandler"/>.
            </summary>
            <param name="responseStore">Object that can store and retrieve response messages</param>
            <returns>A <see cref="T:System.Net.Http.HttpMessageHandler"/></returns>
        </member>
        <member name="T:FakeHttp.FakeHttpMessageHandler">
            <summary>
            A <see cref="T:System.Net.Http.HttpMessageHandler"/> that retrieves http resonse messages from
            an alternate storage rather than from a given http endpoint
            </summary>
        </member>
        <member name="M:FakeHttp.FakeHttpMessageHandler.#ctor(FakeHttp.IReadonlyResponseStore)">
            <summary>
            ctor
            </summary>
            <param name="store">The storage mechansim for responses</param>
        </member>
        <member name="M:FakeHttp.FakeHttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Override the base class to skip http and retrieve message from storage
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns>The stored response message</returns>
        </member>
        <member name="T:FakeHttp.ResponseCallbacks">
            <summary>
            Default implementations of the <see cref="T:FakeHttp.IResponseCallbacks"/> interface that do nothing
            </summary>
        </member>
        <member name="M:FakeHttp.ResponseCallbacks.#ctor(System.Func{System.String,System.String,System.Boolean})">
            <summary>
            This ctor is only meant for backwards compatiblity with the use of the paramFilter constructors
            </summary>
            <param name="paramFilter"></param>
        </member>
        <member name="M:FakeHttp.ResponseCallbacks.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:FakeHttp.ResponseCallbacks.SetHeaderDate">
            <summary>
            Flag indicating whether to automatically set the Date header to the current date/time on deserialization
            </summary>
        </member>
        <member name="M:FakeHttp.ResponseCallbacks.Deserialized(FakeHttp.ResponseInfo,System.IO.Stream)">
            <summary>
            Called just before the response is returned. Update deserialized values as necessary
            Primarily for cases where time based header values (like content expiration) need up to date values
            </summary>
            <param name="info">Desrialized response data. Header collections can be modified. Might be null if content file but no response file is present</param>
            <param name="content">The deserialized content stream. Might be null if response has no content</param>
            <returns>The original content or a modified content stream to attach to the <see cref="T:System.Net.Http.HttpResponseMessage"/></returns>
        </member>
        <member name="M:FakeHttp.ResponseCallbacks.FilterParameter(System.String,System.String)">
            <summary>
            Determines if a given query parameter should be excluded from serialization
            </summary>
            <param name="name">The name of the Uri query parameter</param>
            <param name="value">The value of the uri query parameter</param>
            <returns>False</returns>
        </member>
        <member name="M:FakeHttp.ResponseCallbacks.Serializing(System.Net.Http.HttpResponseMessage)">
            <summary>
            Called after content is retrieved from the actual service and before it is is saved to disk.
            Primarily allows for response content to mask sensitive data (ex. SSN or other PII) before it is saved to storage
            </summary>
            <param name="response">The response</param>
            <returns>The original content stream</returns>
        </member>
        <member name="T:FakeHttp.ResponseInfo">
            <summary>
            A serializatoin friendly wrapper around <see cref="T:System.Net.Http.HttpResponseMessage"/>
            </summary>
        </member>
        <member name="M:FakeHttp.ResponseInfo.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:FakeHttp.ResponseInfo.StatusCode">
            <summary>
            The response status code
            </summary>
        </member>
        <member name="P:FakeHttp.ResponseInfo.BaseUri">
            <summary>
            The host and path of the request that originally created this response
            </summary>
        </member>
        <member name="P:FakeHttp.ResponseInfo.Query">
            <summary>
            The query string from the request that generated the response (used to key the response for future reference)
            </summary>
        </member>
        <member name="P:FakeHttp.ResponseInfo.ContentFileName">
            <summary>
            The name of the associated serialized content file
            </summary>
        </member>
        <member name="P:FakeHttp.ResponseInfo.ResponseHeaders">
            <summary>
            The response headers
            </summary>
        </member>
        <member name="P:FakeHttp.ResponseInfo.ContentHeaders">
            <summary>
            The content headers
            </summary>
        </member>
        <member name="M:FakeHttp.ResponseInfo.CreateResponse">
            <summary>
            Create an <see cref="T:System.Net.Http.HttpResponseMessage"/> from the object's state
            </summary>
            <returns>The <see cref="T:System.Net.Http.HttpResponseMessage"/></returns>
        </member>
        <member name="M:FakeHttp.ResponseInfo.CreateContent(System.IO.Stream)">
            <summary>
            Creates an <see cref="T:System.Net.Http.HttpContent"/> object from a stream, setting content headers
            </summary>
            <param name="stream">The content stream</param>
            <returns>The conent object</returns>
        </member>
        <member name="T:FakeHttp.ResponseLoader">
            <summary>
            Base class for file based response message retrieval that allows 
            separation between desktop and universal app machanisms for file api
            </summary>
        </member>
        <member name="M:FakeHttp.ResponseLoader.#ctor(FakeHttp.MessageFormatter)">
            <summary>
            ctor 
            </summary>
            <param name="formatter">PLatofrma specific formatter object</param>
        </member>
        <member name="M:FakeHttp.ResponseLoader.Exists(System.String,System.String)">
            <summary>
            Checks whether the specified file exists
            </summary>
            <param name="folder">The folder name</param>
            <param name="fileName">The file name</param>
            <returns>Flag indicating whether file exists</returns>
        </member>
        <member name="M:FakeHttp.ResponseLoader.LoadAsString(System.String,System.String)">
            <summary>
            Loads a given file as a string
            </summary>
            <param name="folder">The folder name</param>
            <param name="fileName">The file name</param>
            <returns>The file's contents as a string</returns>
        </member>
        <member name="M:FakeHttp.ResponseLoader.LoadAsStream(System.String,System.String)">
            <summary>
            Loads a given file as a stream
            </summary>
            <param name="folder">The folder name</param>
            <param name="fileName">The file name</param>
            <returns>File's contents as a stream</returns>
        </member>
        <member name="M:FakeHttp.ResponseLoader.Exists(System.Net.Http.HttpRequestMessage)">
            <summary>
            Determines if a <see cref="T:System.Net.Http.HttpResponseMessage"/> exists for the 
            <see cref="T:System.Net.Http.HttpRequestMessage"/>
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>True if a response exists for the request. Otherwise false</returns>
        </member>
        <member name="M:FakeHttp.ResponseLoader.FindResponse(System.Net.Http.HttpRequestMessage)">
            <summary>
            Finds the response message keyed to a request message
            </summary>
            <param name="request">The request message</param>
            <returns>The response message or a 404 message if not found</returns>
        </member>
    </members>
</doc>
